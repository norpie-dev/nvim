global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def not_math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '0'

def comment():
    return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")
    return x != '0' and x != '0'

endglobal

# Snippets for sections

snippet beg "begin{} \ end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet

snippet sec "section{}" bA
\section{$1}
$0
endsnippet

snippet ssec "subsection{}" bA
\subsection{$1}
$0
endsnippet

snippet sssec "subsubsection{}" bA
\subsubsection{$1}
$0
endsnippet

snippet chap "chapter{}" bA
\chapter{$1}
$0
endsnippet

snippet par "paragraph{}" bA
\paragraph{$1}
$0
endsnippet

snippet inp "input{}" bA
\input{$1}
$0
endsnippet

# Math

context "not_math()"
snippet im "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

context "not_math()"
snippet dm "Math" wA
\[
$1
\] $0
endsnippet

snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet comp "complement" iA
^{c}
endsnippet

context "math()"
snippet tp "superscript" iA
^{$1}$0
endsnippet

context "math()"
snippet deriv "derivative d/dx" iA
\\frac{d}{dx}$0
endsnippet

context "math()"
snippet sqrt "square root" iA
\sqrt{$1}$0
endsnippet

context "math()"
snippet vec "\vec" iA
\vec{$1}$0
endsnippet

context "math()"
snippet int "\int" iA
\int
endsnippet

context "math()"
snippet ln "natural logarithm" iA
\ln{$1}$0
endsnippet

context "math()"
snippet log "logarithm" iA
\log{$1}$0
endsnippet

context "math()"
snippet sin "sin" iA
\sin$0
endsnippet

context "math()"
snippet cos "cos" iA
\cos$0
endsnippet

context "math()"
snippet tan "tan" iA
\tan$0
endsnippet

context "math()"
snippet sec "sec" iA
\sec$0
endsnippet

context "math()"
snippet cot "cot" iA
\cot$0
endsnippet

context "math()"
snippet csc "csc" iA
\csc$0
endsnippet

context "math()"
snippet sgn "sgn" iA
\sign$0
endsnippet

context "math()"
snippet abs "abs" iA
|$1|$0
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet theorem "theorem" bA
\begin{theorem}
	$0
\end{theorem}
endsnippet

snippet example "example" bA
\begin{example}{$1}
	$0
\end{example}
endsnippet

snippet definition "definition" bA
\begin{definition}{$1}
	$0
\end{definition}
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# Text Formatting

snippet tbo "\textbf"
\textbf{$1} $0
endsnippet

snippet tit "\textit"
\textit{$1} $0
endsnippet

snippet ink "\inkfig" bA
\begin{figure}[ht]
	\centering
	\inkfig{$1}
	\caption{$2}
	\label{fig:$1}
\end{figure}
$0
endsnippet
